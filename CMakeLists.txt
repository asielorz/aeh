cmake_minimum_required(VERSION 3.13)

get_directory_property(is_subproject PARENT_DIRECTORY)
if(is_subproject)
	message(STATUS "Building as subproject")
endif()

if (NOT is_subproject)
	project(aeh CXX)

	set_property(GLOBAL PROPERTY USE_FOLDERS ON)
	set(CMAKE_CXX_EXTENSIONS OFF)

	option(ENABLE_IPO "Enable Iterprocedural Optimization, aka Link Time Optimization (LTO)" OFF)
	option(FAIL_IF_IPO_NOT_SUPPORTED "If ENABLE_IPO is true, and it is not supported, consider it a failure" ON)

	if(ENABLE_IPO)
		include(CheckIPOSupported)
		check_ipo_supported(RESULT ipo_supported OUTPUT check_ipo_supported_output LANGUAGES CXX)
		
		if(ipo_supported)
			set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)
		else()
			if (FAIL_IF_IPO_NOT_SUPPORTED)
				message(FATAL_ERROR "IPO is not supported: ${check_ipo_supported_output}")
			else()
				message(WARNING "IPO is not supported: ${check_ipo_supported_output}")
			endif()
		endif()
	endif()
endif()

option(AEH_WITH_SDL2 "Build components depending on SDL2" ON)
option(AEH_WITH_IMGUI "Build components depending on Dear ImGui" ON)
option(AEH_WITH_GLM "Build components depending on GLM" ON)
option(AEH_BUILD_TESTS "Build unit-tests" ON)
if (AEH_WITH_IMGUI AND NOT AEH_WITH_IMGUI)
	message(FATAL_ERROR "Dear ImGui depends on SDL2")
endif()

list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/cmake")

if (CONAN_EXPORTED) # Running from conan, building a package
	include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)
	conan_basic_setup()
else() # Development, running directly from cmake
	get_property(is_multi_config GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
	if (is_multi_config)
		if (NOT is_subproject)
			set(CMAKE_CONFIGURATION_TYPES Debug Release)
		endif()
		set(conan_configuration_types_args CONFIGURATION_TYPES ${CMAKE_CONFIGURATION_TYPES})

		set(conan_generators_args GENERATORS cmake_find_package_multi)
		list(APPEND CMAKE_PREFIX_PATH ${CMAKE_CURRENT_BINARY_DIR}) # To be able to find the 'XXXConfig.cmake' files generated by conan
	else()
		set(conan_configuration_types_args)
		set(conan_generators_args GENERATORS cmake_find_package)
		list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_BINARY_DIR}) # To be able to find the 'FindXXX.cmake' files generated by conan
	endif()

	include(conan)

	conan_add_remote(
		NAME bincrafters
		URL https://api.bintray.com/conan/bincrafters/public-conan
	)

	function(add_conan_bool_option out_options_list bool_option option_name)
		if (${bool_option})
			list(APPEND ${out_options_list} "${option_name}=True")
		else()
			list(APPEND ${out_options_list} "${option_name}=False")
		endif()
		set(${out_options_list} ${${out_options_list}} PARENT_SCOPE)
	endfunction()

	set(conan_options)
	add_conan_bool_option(conan_options ${AEH_WITH_SDL2} "with_sdl2")
	add_conan_bool_option(conan_options ${AEH_WITH_IMGUI} "with_imgui")
	add_conan_bool_option(conan_options ${AEH_WITH_GLM} "with_glm")
	add_conan_bool_option(conan_options ${AEH_BUILD_TESTS} "with_unit_tests")

	if (NOT conan_options STREQUAL "")
		set(conan_options OPTIONS ${conan_options})
	endif()
	
	conan_cmake_run(
		CONANFILE conanfile.py
		${conan_generators_args}
		${conan_configuration_types_args}
		${conan_options}
		BUILD missing
	)
endif()

if (NOT is_subproject)
	option(TREAT_WARNINGS_AS_ERRORS "Treat warnings as errors" TRUE)

	if (MSVC)
		add_link_options(
			/time
			/IGNORE:4099 # Missing .pdb file
		)
		add_compile_options(/W4)

		if (TREAT_WARNINGS_AS_ERRORS)
			add_compile_options(/WX)
		endif()

		if (MSVC_VERSION GREATER_EQUAL 1910) # Visual Studio 2017 or greater
			add_compile_options(
				/permissive-
				/diagnostics:caret
			)
		endif()
	endif()

	if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang" OR CMAKE_CXX_COMPILER_ID STREQUAL "GNU") # clang or gcc
		if (TREAT_WARNINGS_AS_ERRORS)
			add_compile_options(-Werror)
		endif()

		add_compile_options(
			-Wall
			-Wextra
			-pedantic
			-Wdouble-promotion
			#-Wconversion
			#-Wnull-dereference
			#-Wsign-conversion
			#-Wno-redundant-move
			#-fno-strict-aliasing
		)
	endif()

	if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
		add_compile_options(
			#-Wno-missing-braces
		)
	endif()

	if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
		add_compile_options(
			#-fno-lifetime-dse
		)
	endif()
endif()

install(FILES "LICENSE.txt" DESTINATION ".")
add_subdirectory(aeh)

if (AEH_BUILD_TESTS)
	enable_testing()
	add_subdirectory(tests)
endif()
